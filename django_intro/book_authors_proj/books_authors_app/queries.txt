Crteate Books and Authors class
class Books(models.Model):
    title = models.CharField(max_length=255)
    desc = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Authors(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    notes = models.TextField(null=True)                    # Created a text file for notes
    books = models.ManyToManyField(Books, related_name="authors")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

Create Five books and five authors
>>> Books.objects.create(title="C Sharp", desc="Coding Lang")
<Books: Books object (1)>
>>> Books.objects.create(title="Java", desc="Coding Lang")
<Books: Books object (2)>
>>> Books.objects.create(title="Python", desc="Coding Lang")
<Books: Books object (3)>
>>> Books.objects.create(title="PHP", desc="Coding Lang")
<Books: Books object (4)>
>>> Books.objects.create(title="Ruby", desc="Coding Lang")
<Books: Books object (5)>
>>> Authors.objects.create(first_name="Jane", last_name="Austen")
<Authors: Authors object (1)>
>>> Authors.objects.create(first_name="Emily", last_name="Dickenson")
<Authors: Authors object (2)>
>>> Authors.objects.create(first_name="Fyodor", last_name="Dostoevksy")
<Authors: Authors object (3)>
>>> Authors.objects.create(first_name="William", last_name="Shakespeare")
<Authors: Authors object (4)>
>>> Authors.objects.create(first_name="Lau", last_name="Tzu")
<Authors: Authors object (5)>

Change book name C Sharp to C#
>>> from books_authors_app.models import *
>>> Books.objects.get(id=1).title = "C#"
>>> Books.objects.get(id=1).save()

Change first_name of fourth author to Bill
>>> Authors.objects.get(id=4).first_name = "Bill"
>>> Authors.objects.get(id=4).save()

Assign the first author to the first two books
>>> this_book = Books.objects.get(id=1)
>>> this_author.books.add(this_book)
>>> this_book = Books.objects.get(id=2)
>>> this_author.books.add(this_book)

Assign the second author the first three books
>>> this_book = Books.objects.get(id=1)
>>> this_author.books.add(this_book)
>>> this_book = Books.objects.get(id=2)
>>> this_author.books.add(this_book)
>>> this_book = Books.objects.get(id=3)
>>> this_author.books.add(this_book)

Assign the third author to the first four books
>>> this_book = Books.objects.get(id=1)
>>> this_author.books.add(this_book)
>>> this_book = Books.objects.get(id=2)
>>> this aothor.books.add(this_book)
  File "<console>", line 1
    this aothor.books.add(this_book)
              ^
SyntaxError: invalid syntax
>>> this_author.books.add(this_book)
>>> this_book = Books.objects.get(id=3)
>>> this_author.books.add(this_book)
>>> this_book = Books.objects.get(id=4)
>>> this_author.books.add(this_book)

Assign the fourth author to the first 5 books 



Retrieve all the authors for the 3rd book
>>> three_book = Books.objects.get(id=3)
>>> three_book.authors.all()
<QuerySet [<Authors: Authors object (2)>, <Authors: Authors object (3)>]>

Remove the first author of the 3rd book
>>> third_book.authors.remove(first_author)
>>> third_book.authors.all()
<QuerySet [<Authors: Authors object (2)>, <Authors: Authors object (3)>]>

Add the 5th author as one of the authors of the 2nd book
>>> fifth_author = Authors.objects.get(id=5)
>>> second_book = Books.objects.get(id=2)
>>> second_book.authors.add(fifth_author)

Find all the books for the 3rd author
>>> third_author = Authors.objects.get(id=3)
>>> third_author.books.all()
<QuerySet [<Books: Books object (1)>, <Books: Books object (2)>, <Books: Books object (3)>, <Books: Books object (4)>]>

Find all the authors that contributed to the 5th book
>>> fifth_book.authors.all()
<QuerySet []>  # It appears that one of the previous assigns did not work!